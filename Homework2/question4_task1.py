# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YyIVxxQdvNOZMhfWQOJ6kp23-3-EgNXK
"""

import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Define the simplified AlexNet model
model = Sequential([
    # Layer 1: Conv2D with 96 filters, kernel size = (11,11), stride = 4, activation = ReLU
    Conv2D(filters=96, kernel_size=(11, 11), strides=(4, 4), activation='relu', input_shape=(227, 227, 3)),
    # Layer 2: MaxPooling with pool size = (3,3), stride = 2
    MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    # Layer 3: Conv2D with 256 filters, kernel size = (5,5), activation = ReLU
    Conv2D(filters=256, kernel_size=(5, 5), activation='relu'),
    # Layer 4: MaxPooling with pool size = (3,3), stride = 2
    MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    # Layer 5: Conv2D with 384 filters, kernel size = (3,3), activation = ReLU
    Conv2D(filters=384, kernel_size=(3, 3), activation='relu'),
    # Layer 6: Conv2D with 384 filters, kernel size = (3,3), activation = ReLU
    Conv2D(filters=384, kernel_size=(3, 3), activation='relu'),
    # Layer 7: Conv2D with 256 filters, kernel size = (3,3), activation = ReLU
    Conv2D(filters=256, kernel_size=(3, 3), activation='relu'),
    # Layer 8: MaxPooling with pool size = (3,3), stride = 2
    MaxPooling2D(pool_size=(3, 3), strides=(2, 2)),
    # Layer 9: Flatten
    Flatten(),
    # Layer 10: Fully Connected (Dense) Layer with 4096 neurons, activation = ReLU
    Dense(units=4096, activation='relu'),
    # Layer 11: Dropout Layer with 50% dropout
    Dropout(rate=0.5),
    # Layer 12: Fully Connected (Dense) Layer with 4096 neurons, activation = ReLU
    Dense(units=4096, activation='relu'),
    # Layer 13: Dropout Layer with 50% dropout
    Dropout(rate=0.5),
    # Layer 14: Output Layer with 10 neurons, activation = Softmax
    Dense(units=10, activation='softmax')
])

# Print the model summary
model.summary()