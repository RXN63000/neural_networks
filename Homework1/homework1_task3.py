# -*- coding: utf-8 -*-
"""homework1_task3

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FmTiY8M0444AiRFpWLwrPFUqJn0UhuTR
"""

import tensorflow as tf
import matplotlib.pyplot as plt
from tensorflow import keras
from sklearn.model_selection import train_test_split

#Task 3

#Train a Model with Different Optimizers

#Task: Train MNIST Model with Adam & SGD
# 1 Load the MNIST dataset.
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Preprocess the data
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0
y_train = tf.keras.utils.to_categorical(y_train, num_classes=10)
y_test = tf.keras.utils.to_categorical(y_test, num_classes=10)

# Split the training data into training and validation sets
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)


# 3 Train two models: One with Adam and another with SGD.

# Define a simple sequential model
def create_model():
    model = keras.Sequential([
        keras.layers.Flatten(input_shape=(28, 28)),
        keras.layers.Dense(128, activation='relu'),
        keras.layers.Dense(10, activation='softmax')
    ])
    return model

# Create two models
model_adam = create_model()
model_sgd = create_model()

# Compile the models with different optimizers
model_adam.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model_sgd.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the models
history_adam = model_adam.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_val, y_val))
history_sgd = model_sgd.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_val, y_val))


# 3 Compare training and validation accuracy trends.

# Plot training and validation accuracy for Adam
plt.plot(history_adam.history['accuracy'], label='Adam Train Accuracy')
plt.plot(history_adam.history['val_accuracy'], label='Adam Validation Accuracy')

# Plot training and validation accuracy for SGD
plt.plot(history_sgd.history['accuracy'], label='SGD Train Accuracy')
plt.plot(history_sgd.history['val_accuracy'], label='SGD Validation Accuracy')

plt.title('Training and Validation Accuracy Comparison')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()