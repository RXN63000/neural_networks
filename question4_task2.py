# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qHd-IIAbxa_Hb05sK_h-8VwNZ-F4PkbZ
"""

import tensorflow as tf
from tensorflow.keras import layers, models

def residual_block(input_tensor, filters=64):
    x = layers.Conv2D(filters, (3, 3), padding='same', activation='relu')(input_tensor)
    x = layers.Conv2D(filters, (3, 3), padding='same')(x)
    x = layers.Add()([x, input_tensor])  # Skip connection
    x = layers.Activation('relu')(x)  # Activation after addition
    return x

def build_resnet(input_shape, num_classes):
    inputs = layers.Input(shape=input_shape)
    x = layers.Conv2D(64, (7, 7), strides=2, padding='same', activation='relu')(inputs)
    x = layers.MaxPooling2D((2, 2))(x)

    # Two Residual Blocks
    x = residual_block(x, 64)
    x = residual_block(x, 64)

    x = layers.Flatten()(x)
    x = layers.Dense(128, activation='relu')(x)
    x = layers.Dense(num_classes, activation='softmax')(x)

    model = models.Model(inputs, x)
    return model

def build_alexnet(input_shape, num_classes):
    model = models.Sequential([
        layers.Conv2D(96, (11, 11), strides=4, activation='relu', input_shape=input_shape),
        layers.MaxPooling2D((3, 3), strides=2),
        layers.Conv2D(256, (5, 5), padding='same', activation='relu'),
        layers.MaxPooling2D((3, 3), strides=2),
        layers.Conv2D(384, (3, 3), padding='same', activation='relu'),
        layers.Conv2D(384, (3, 3), padding='same', activation='relu'),
        layers.Conv2D(256, (3, 3), padding='same', activation='relu'),
        layers.MaxPooling2D((3, 3), strides=2),
        layers.Flatten(),
        layers.Dense(4096, activation='relu'),
        layers.Dense(4096, activation='relu'),
        layers.Dense(num_classes, activation='softmax')
    ])
    return model

# Define model parameters
input_shape = (224, 224, 3)  # Typical image size
num_classes = 10  # Example classification task

# Build and summarize AlexNet model
alexnet_model = build_alexnet(input_shape, num_classes)
alexnet_model.summary()

# Build and summarize ResNet-like model
resnet_model = build_resnet(input_shape, num_classes)
resnet_model.summary()